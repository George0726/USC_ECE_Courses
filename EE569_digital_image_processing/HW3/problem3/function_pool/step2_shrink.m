function output =step2_shrink(M)

[m,n] = size(M);
output = zeros(m,n);
M_pad = zero_padding(M);

for i=1:m
    for j=1:n
        if M_pad(i + 1,j + 1) == 0
            continue
        else
            % spur
            spur1 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            spur2 = M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            % Single 4-connection
            s4c1 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            s4c2 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            % L Cluster
            l1 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            l2 = ~M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            l3 = M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            l4 = M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            l5 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            l6 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            l7 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1) && M_pad(i + 1 + 1,j + 1 + 1);
            l8 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && M_pad(i + 1 + 1,j + 1 + 1);
            % 4-connected Offset
            c4o1 = ~M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            c4o2 = M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            c4o3 = ~M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && M_pad(i + 1 + 1,j + 1 + 1);
            c4o4 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            % Spur corner Cluster
            scc1 = ~M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && ...
                 M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1) && ...
                 (M_pad(i + 1 - 1,j + 1) || M_pad(i + 1,j + 1 + 1));
            scc2 = M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1) && M_pad(i + 1 + 1,j + 1 + 1) && ...
                 (M_pad(i + 1, j + 1 - 1) || M_pad(i + 1 - 1,j + 1));
            scc3 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1 + 1) && ...
                 (M_pad(i + 1,j + 1 - 1) || M_pad(i + 1 + 1,j + 1));
            scc4 = M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1,j + 1 - 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1 + 1) && ...
                 (M_pad(i + 1, j + 1 + 1) || M_pad(i + 1 + 1,j + 1));
            % Corner Cluster
            cc1 = M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && ...
                 M_pad(i + 1,j + 1 - 1);
            % Tee Branch
            tb1 = M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            tb2 = ~M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1);
            tb3 = ~M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1);
            tb4 = ~M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            tb5 = M_pad(i + 1 - 1,j + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            tb6 = ~M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1);
            tb7 = ~M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1);
            tb8 = M_pad(i + 1 - 1,j + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
            % Vee Branch
            vb1 = M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 (M_pad(i + 1 + 1,j + 1 - 1) || M_pad(i + 1 + 1,j + 1) || M_pad(i + 1 + 1,j + 1 + 1));
            vb2 = M_pad(i + 1 - 1,j + 1 - 1) && ...
                 M_pad(i + 1 + 1,j + 1 - 1) && ...
                 (M_pad(i + 1 - 1,j + 1 + 1) || M_pad(i + 1,j + 1 + 1) || M_pad(i + 1 + 1,j + 1 + 1));
            vb3 = M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1 + 1) && ...
                 (M_pad(i + 1 - 1,j + 1 - 1) || M_pad(i + 1 - 1,j + 1) || M_pad(i + 1 - 1,j + 1 + 1));
            vb4 = M_pad(i + 1 - 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1 + 1) && ...
                 (M_pad(i + 1 - 1,j + 1 - 1) || M_pad(i + 1, j + 1 - 1) || M_pad(i + 1 + 1,j + 1 - 1));
            % Diagonal Branch
            db1 = M_pad(i + 1 - 1,j + 1) && ~M_pad(i + 1 - 1,j + 1 + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1 - 1) && ~M_pad(i + 1 + 1,j + 1);
            db2 = ~M_pad(i + 1 - 1,j + 1 - 1) && M_pad(i + 1 - 1,j + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1) && M_pad(i + 1 + 1,j + 1 + 1);
            db3 = ~M_pad(i + 1 - 1,j + 1) && M_pad(i + 1 - 1,j + 1 + 1) && ...
                 M_pad(i + 1, j + 1 - 1) && ~M_pad(i + 1,j + 1 + 1) && ...
                 ~M_pad(i + 1 + 1,j + 1 - 1) && M_pad(i + 1 + 1,j + 1);
            db4 = M_pad(i + 1 - 1,j + 1 - 1) && ~M_pad(i + 1 - 1,j + 1) && ...
                 ~M_pad(i + 1, j + 1 - 1) && M_pad(i + 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1) && ~M_pad(i + 1 + 1,j + 1 + 1);
             add_ed = M_pad(i + 1, j + 1 ) && M_pad(i + 1,j + 1 + 1) && ...
                 M_pad(i + 1 + 1,j + 1) && M_pad(i + 1 + 1,j + 1 + 1);

            output(i,j) = ~(spur1 || spur2 || s4c1 || s4c2 || l1 || l2 || l3 || l4 || l5 || l6 || l7 || l8 || c4o1 || c4o2 || c4o3 || c4o4 || scc1 || scc2 || scc3 || scc4 || cc1 || tb1 || tb2 || tb3 || tb4 || tb5 || tb6 || ...
                tb7 || tb8 || vb1 || vb2 || vb3 || vb4 || db1 || db2 || db3 || db4 || add_ed);
        end
    end
end
end
        
